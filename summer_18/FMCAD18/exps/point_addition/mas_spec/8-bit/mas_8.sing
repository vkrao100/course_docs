LIB "linalg.lib";
LIB "dmodapp.lib";
LIB "my_proc.lib";
ring R = (2,X),(Z, A, B, z_7_, z_6_, z_5_, z_4_, z_3_, z_2_, z_1_, z_0_, h5, h4, h3, h2, h1, h0, g17, g16, g15, g14, g13, g12, g11, g10, g9, g8, g7, g6, g5, g4, g3, g2, g1, g0, f36, f35, f34, f33, f32, f31, f30, f29, f28, f27, f26, f25, f24, f23, f22, f21, f20, f19, f18, f17, f16, f15, f14, f13, f12, f11, f10, f9, f8, f7, f6, f5, f4, f3, f2, f1, f0, e72, e71, e70, e69, e68, e67, e66, e65, e64, e63, e62, e61, e60, e59, e58, e57, e56, e55, e54, e53, e52, e51, e50, e49, e48, e47, e46, e45, e44, e43, e42, e41, e40, e39, e38, e37, e36, e35, e34, e33, e32, e31, e30, e29, e28, e27, e26, e25, e24, e23, e22, e21, e20, e19, e18, e17, e16, e15, e14, e13, e12, e11, e10, e9, e8, e7, e6, e5, e4, e3, e2, e1, e0, d149, d148, d147, d146, d145, d144, d143, d142, d141, d140, d139, d138, d137, d136, d135, d134, d133, d132, d131, d130, d129, d128, d127, d126, d125, d124, d123, d122, d121, d120, d119, d118, d117, d116, d115, d114, d113, d112, d111, d110, d109, d108, d107, d106, d105, d104, d103, d102, d101, d100, d99, d98, d97, d96, d95, d94, d93, d92, d91, d90, d89, d88, d87, d86, d85, d84, d83, d82, d81, d80, d79, d78, d77, d76, d75, d74, d73, d72, d71, d70, d69, d68, d67, d66, d65, d64, d63, d62, d61, d60, d59, d58, d57, d56, d55, d54, d53, d52, d51, d50, d49, d48, d47, d46, d45, d44, d43, d42, d41, d40, d39, d38, d37, d36, d35, d34, d33, d32, d31, d30, d29, d28, d27, d26, d25, d24, d23, d22, d21, d20, d19, d18, d17, d16, d15, d14, d13, d12, d11, d10, d9, d8, d7, d6, d5, d4, d3, d2, d1, d0, b_7_, b_6_, b_5_, b_4_, b_3_, b_2_, b_1_, b_0_, a_7_, a_6_, a_5_, a_4_, a_3_, a_2_, a_1_, a_0_),lp;

rtimer=0;
system("--ticks-per-sec",1000);
int t0 = rtimer;


minpoly = X^8+X^4+X^3+X^2+1;

ideal J1 =
d1 + a_1_*b_7_,
d0 + a_0_*b_0_,
d2 + a_2_*b_6_,
d3 + a_3_*b_5_,
d4 + a_4_*b_4_,
d5 + a_5_*b_3_,
d6 + a_6_*b_2_,
d7 + a_7_*b_1_,
d8 + a_5_*b_7_,
d9 + a_6_*b_6_,
d10 + a_7_*b_5_,
d11 + a_6_*b_7_,
d12 + a_7_*b_6_,
d13 + a_7_*b_7_,
d14 + a_0_*b_1_,
d15 + a_1_*b_0_,
d16 + a_2_*b_7_,
d17 + a_3_*b_6_,
d18 + a_4_*b_5_,
d19 + a_5_*b_4_,
d20 + a_6_*b_3_,
d21 + a_7_*b_2_,
d22 + a_6_*b_7_,
d23 + a_7_*b_6_,
d24 + a_7_*b_7_,
d25 + a_0_*b_2_,
d26 + a_1_*b_1_,
d27 + a_2_*b_0_,
d28 + a_1_*b_7_,
d29 + a_2_*b_6_,
d30 + a_3_*b_5_,
d31 + a_4_*b_4_,
d32 + a_5_*b_3_,
d33 + a_6_*b_2_,
d34 + a_7_*b_1_,
d35 + a_3_*b_7_,
d36 + a_4_*b_6_,
d37 + a_5_*b_5_,
d38 + a_6_*b_4_,
d39 + a_7_*b_3_,
d40 + a_5_*b_7_,
d41 + a_6_*b_6_,
d42 + a_7_*b_5_,
d43 + a_6_*b_7_,
d44 + a_7_*b_6_,
d45 + a_0_*b_3_,
d46 + a_1_*b_2_,
d47 + a_2_*b_1_,
d48 + a_3_*b_0_,
d49 + a_1_*b_7_,
d50 + a_2_*b_6_,
d51 + a_3_*b_5_,
d52 + a_4_*b_4_,
d53 + a_5_*b_3_,
d54 + a_6_*b_2_,
d55 + a_7_*b_1_,
d56 + a_2_*b_7_,
d57 + a_3_*b_6_,
d58 + a_4_*b_5_,
d59 + a_5_*b_4_,
d60 + a_6_*b_3_,
d61 + a_7_*b_2_,
d62 + a_4_*b_7_,
d63 + a_5_*b_6_,
d64 + a_6_*b_5_,
d65 + a_7_*b_4_,
d66 + a_5_*b_7_,
d67 + a_6_*b_6_,
d68 + a_7_*b_5_,
d69 + a_0_*b_4_,
d70 + a_1_*b_3_,
d71 + a_2_*b_2_,
d72 + a_3_*b_1_,
d73 + a_4_*b_0_,
d74 + a_1_*b_7_,
d75 + a_2_*b_6_,
d76 + a_3_*b_5_,
d77 + a_4_*b_4_,
d78 + a_5_*b_3_,
d79 + a_6_*b_2_,
d80 + a_7_*b_1_,
d81 + a_2_*b_7_,
d82 + a_3_*b_6_,
d83 + a_4_*b_5_,
d84 + a_5_*b_4_,
d85 + a_6_*b_3_,
d86 + a_7_*b_2_,
d87 + a_3_*b_7_,
d88 + a_4_*b_6_,
d89 + a_5_*b_5_,
d90 + a_6_*b_4_,
d91 + a_7_*b_3_,
d92 + a_7_*b_7_,
d93 + a_0_*b_5_,
d94 + a_1_*b_4_,
d95 + a_2_*b_3_,
d96 + a_3_*b_2_,
d97 + a_4_*b_1_,
d98 + a_5_*b_0_,
d99 + a_2_*b_7_,
d100 + a_3_*b_6_,
d101 + a_4_*b_5_,
d102 + a_5_*b_4_,
d103 + a_6_*b_3_,
d104 + a_7_*b_2_,
d105 + a_3_*b_7_,
d106 + a_4_*b_6_,
d107 + a_5_*b_5_,
d108 + a_6_*b_4_,
d109 + a_7_*b_3_,
d110 + a_4_*b_7_,
d111 + a_5_*b_6_,
d112 + a_6_*b_5_,
d113 + a_7_*b_4_,
d114 + a_0_*b_6_,
d115 + a_1_*b_5_,
d116 + a_2_*b_4_,
d117 + a_3_*b_3_,
d118 + a_4_*b_2_,
d119 + a_5_*b_1_,
d120 + a_6_*b_0_,
d121 + a_3_*b_7_,
d122 + a_4_*b_6_,
d123 + a_5_*b_5_,
d124 + a_6_*b_4_,
d125 + a_7_*b_3_,
d126 + a_4_*b_7_,
d127 + a_5_*b_6_,
d128 + a_6_*b_5_,
d129 + a_7_*b_4_,
d130 + a_5_*b_7_,
d131 + a_6_*b_6_,
d132 + a_7_*b_5_,
d133 + a_0_*b_7_,
d134 + a_1_*b_6_,
d135 + a_2_*b_5_,
d136 + a_3_*b_4_,
d137 + a_4_*b_3_,
d138 + a_5_*b_2_,
d139 + a_6_*b_1_,
d140 + a_7_*b_0_,
d141 + a_4_*b_7_,
d142 + a_5_*b_6_,
d143 + a_6_*b_5_,
d144 + a_7_*b_4_,
d145 + a_5_*b_7_,
d146 + a_6_*b_6_,
d147 + a_7_*b_5_,
d148 + a_6_*b_7_,
d149 + a_7_*b_6_,
e0 + d0+d1,
e1 + d2+d3,
e2 + d4+d5,
e3 + d6+d7,
e4 + d8+d9,
e5 + d10+d11,
e6 + d12+d13,
e7 + d14+d15,
e8 + d16+d17,
e9 + d18+d19,
e10 + d20+d21,
e11 + d22+d23,
e12 + d25+d26,
e13 + d27+d28,
e14 + d29+d30,
e15 + d31+d32,
e16 + d33+d34,
e17 + d35+d36,
e18 + d37+d38,
e19 + d39+d40,
e20 + d41+d42,
e21 + d43+d44,
e22 + d45+d46,
e23 + d47+d48,
e24 + d49+d50,
e25 + d51+d52,
e26 + d53+d54,
e27 + d55+d56,
e28 + d57+d58,
e29 + d59+d60,
e30 + d61+d62,
e31 + d63+d64,
e32 + d65+d66,
e33 + d67+d68,
e34 + d69+d70,
e35 + d71+d72,
e36 + d73+d74,
e37 + d75+d76,
e38 + d77+d78,
e39 + d79+d80,
e40 + d81+d82,
e41 + d83+d84,
e42 + d85+d86,
e43 + d87+d88,
e44 + d89+d90,
e45 + d91+d92,
e46 + d93+d94,
e47 + d95+d96,
e48 + d97+d98,
e49 + d99+d100,
e50 + d101+d102,
e51 + d103+d104,
e52 + d105+d106,
e53 + d107+d108,
e54 + d109+d110,
e55 + d111+d112,
e56 + d114+d115,
e57 + d116+d117,
e58 + d118+d119,
e59 + d120+d121,
e60 + d122+d123,
e61 + d124+d125,
e62 + d126+d127,
e63 + d128+d129,
e64 + d130+d131,
e65 + d133+d134,
e66 + d135+d136,
e67 + d137+d138,
e68 + d139+d140,
e69 + d141+d142,
e70 + d143+d144,
e71 + d145+d146,
e72 + d147+d148,
f0 + e0+e1,
f1 + e2+e3,
f2 + e4+e5,
f3 + e7+e8,
f4 + e9+e10,
f5 + e11+d24,
f6 + e12+e13,
f7 + e14+e15,
f8 + e16+e17,
f9 + e18+e19,
f10 + e20+e21,
f11 + e22+e23,
f12 + e24+e25,
f13 + e26+e27,
f14 + e28+e29,
f15 + e30+e31,
f16 + e32+e33,
f17 + e34+e35,
f18 + e36+e37,
f19 + e38+e39,
f20 + e40+e41,
f21 + e42+e43,
f22 + e44+e45,
f23 + e46+e47,
f24 + e48+e49,
f25 + e50+e51,
f26 + e52+e53,
f27 + e54+e55,
f28 + e56+e57,
f29 + e58+e59,
f30 + e60+e61,
f31 + e62+e63,
f32 + e64+d132,
f33 + e65+e66,
f34 + e67+e68,
f35 + e69+e70,
f36 + e71+e72,
g0 + f0+f1,
g1 + f2+e6,
g2 + f3+f4,
g3 + f6+f7,
g4 + f8+f9,
g5 + f11+f12,
g6 + f13+f14,
g7 + f15+f16,
g8 + f17+f18,
g9 + f19+f20,
g10 + f21*f22,//bug
g11 + f23+f24,
g12 + f25+f26,
g13 + f27+d113,
g14 + f28+f29,
g15 + f30+f31,
g16 + f33+f34,
g17 + f35+f36,
h0 + g3+g4,
h1 + g5+g6,
h2 + g8+g9,
h3 + g11+g12,
h4 + g14+g15,
h5 + g16+g17,
z_0_ + g0+g1,
z_1_ + g2+f5,
z_2_ + h0+f10,
z_3_ + h1+g7,
z_4_ + h2+g10,
z_5_ + h3+g13,
z_6_ + h4+f32,
z_7_ + h5+d149,
A + a_0_*X^0 + a_1_*X^1 + a_2_*X^2 + a_3_*X^3 + a_4_*X^4 + a_5_*X^5 + a_6_*X^6 + a_7_*X^7,
B + b_0_*X^0 + b_1_*X^1 + b_2_*X^2 + b_3_*X^3 + b_4_*X^4 + b_5_*X^5 + b_6_*X^6 + b_7_*X^7,
Z + z_0_*X^0 + z_1_*X^1 + z_2_*X^2 + z_3_*X^3 + z_4_*X^4 + z_5_*X^5 + z_6_*X^6 + z_7_*X^7;

ideal J0 =
a_0_^2 + a_0_,
a_1_^2 + a_1_,
a_2_^2 + a_2_,
a_3_^2 + a_3_,
a_4_^2 + a_4_,
a_5_^2 + a_5_,
a_6_^2 + a_6_,
a_7_^2 + a_7_,
b_0_^2 + b_0_,
b_1_^2 + b_1_,
b_2_^2 + b_2_,
b_3_^2 + b_3_,
b_4_^2 + b_4_,
b_5_^2 + b_5_,
b_6_^2 + b_6_,
b_7_^2 + b_7_;

//word level spec
poly spec = Z + A*B;

int dps = 8;

//check if the circuit indeed implements specification
poly rema = reduce(spec,J1+J0);
if (rema == 0)
{
	"circuit implements specification, exiting";
	quit;
}
else
{
	"remainder",rema;
	"circuit doesn't implement specification, attempting rectification";
}

list coneTips,exps;
coneTips,exps =  remainder_partition(rema,dps);

/*int i;
string s = exps[1];
for(i=2;i<=size(exps);i++)
{
	s = s + "+" + exps[i];
}
s;*/
int i;
poly s;
for (i=1;i<=size(exps);i++)
{
	s = s + X^exps[i];
}
s;
list rectCheck = prune_logical_cone(coneTips,J1);

int rectified = 0;
for(int rect=1; rect<=size(rectCheck);rect++)
{	
	if (rectified == 0)
	{
		//rectifying at location rf
		poly rf = rectCheck[rect];
		"checking for rectification at", rf;
		ideal ckt_imp = J1;
		
		int t1;
		int ind_r = get_index(ckt_imp, rf);
		int ind_Z = get_index(ckt_imp, Z);
		
		ideal IL = ckt_imp;
		IL[ind_r] = rf+1;
		ideal IH = ckt_imp;
		IH[ind_r] = rf;
		
		int t1;
		
		poly rL = reduce(spec,IL+J0);
		poly rH = reduce(spec,IH+J0);
		
		//"rL",rL;
		//"rH",rH;

		poly rr = rL + rH;"rr-",rr;
		coneTips;

		ideal Ql = quotient(J0,rL);
		ideal Qh = quotient(J0,rH);		

		"Quotient(rL)=",Ql;
		"Quotient(rH)=",Qh;
		
		ideal Gr = groebner(Ql+Qh+J0);
		"groebner(Ql+Qh+J0)=",Gr;
		if(Gr == 1)
		//if(s == rr)
		{
			"Circuit Rectifiable at location",rf;
			int lenI = size(ckt_imp);
			ideal Jf = ckt_imp[1..(ind_r-1)];
			ideal Js = ckt_imp[(ind_r+1)..lenI];
			poly quo;
			poly rem;
			poly prem;
		
			prem = reduce(spec,Jf);
		
			rem, quo = multivariate_burg(prem,lead(rf),J0); 
		
			//"remainder",rem;
			//"quotient",quo;
		
			ideal dec = variables(quo);
			ideal JCp = quo,Js;
			if (size(dec)>=1)
			{
				"quotient is not a constant";
				ideal JG = slimgb(JCp);
				matrix V = lift(JG,rem);
				matrix Vt = transpose(V);
				//Vt;
				matrix U = lift(JCp,JG);
				//U;
				poly sol;
				int i;
				for(i=1;i<=size(JG);i++)
				{
					sol = sol + (Vt[1,i]*U[1,i]);
				}
			}
			else
			{	
				"quotient is a constant";
				if (quo != 1)
				{
					matrix quoi = inverse(quo);
				}
				else
				{
					matrix quoi = 1;
				}
				poly irem   = quoi[1,1]*rem;
				poly sol    = reduce(irem,Js+J0);	
			}
			"solution for P is",sol; 
			poly correc = rf+sol;
			poly corem = reduce(spec, Jf+Js+correc+J0);
		
			"applying correction to circuit at",rf,"with solution",sol,":remainder after reduction is", corem;
			rectified = 1;
		}
		else
		{
			"Circuit not rectifiable at location",rf;
		}
	}
}
"time here",rtimer-t0;