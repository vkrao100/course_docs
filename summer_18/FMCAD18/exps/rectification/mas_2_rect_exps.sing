LIB "primdec.lib";
LIB "control.lib";
LIB "my_proc.lib";

ring r = (2, x), (t, Zs, Z, A, B, z_0, z_1, r_0, s_0, s_3, s_1, s_2, a_0, a_1, b_0, b_1), lp; 

rtimer=0;
system("--ticks-per-sec",1000);
int t0 = rtimer;

minpoly = x^2 + x + 1;

proc xorgate(poly g, poly h)
{
	return(g+h);
}

//circuit -  2 bit mastrovito multiplier poly's
//correct implementation
poly f1 = s_0 + a_0+b_0;
poly f2 = s_3 + a_1*b_1;
poly f2L = s_3 + 1;
poly f2H = s_3 ;
poly f3 = s_2 + a_1*b_0;
poly f4 = s_1 + a_0*b_1;
//poly f5 = r_0 + xorgate(s_1,s_2);
poly f5 = r_0 + s_1*s_2;
poly f6 = z_0 + xorgate(s_0,s_3);
poly f7 = z_1 + xorgate(r_0,s_3);
poly f8 = A + a_0 + a_1*x;
poly f9 = B + b_0 + b_1*x;
poly f10= Z + z_0 + z_1*x;

//buggy implementation
//introducing bug - AND gate instead of XOR gate
//poly fb5 = r_0 + s_1*s_2;

//vanishing polynomials
poly f11 = a_0^2 - a_0;
poly f12 = a_1^2 - a_1;
poly f13 = b_0^2 - b_0;
poly f14 = b_1^2 - b_1;
poly f15 = s_0^2 - s_0;
poly f16 = s_1^2 - s_1;
poly f17 = s_2^2 - s_2;
poly f18 = s_3^2 - s_3;
poly f19 = r_0^2 - r_0;
poly f20 = z_0^2 - z_0;
poly f21 = z_1^2 - z_1;

poly f22 = Z^4 - Z;
poly f25 = Zs^4 - Zs;
poly f23 = A^4 - A;
poly f24 = B^4 - B;

//word level spec
poly spec = Zs + A*B;
ideal J2 = spec;

//list of polynomials for GB calculation
ideal BI  = f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;
ideal J0 = f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24,f25;
reduce(spec,BI);

poly miter = t*(Z-Zs)-1;
poly rf = f2;rf;
ideal ckt_imp = BI + J2 + J0;

ideal BIL = f1, f2L, f3, f4, f5, f6, f7, f8, f9, f10, miter;
ideal BIH = f1, f2H, f3, f4, f5, f6, f7, f8, f9, f10, miter;

int t1;

poly sp0 = spoly(miter,f10);
poly rsp0 = reduce(sp0,BIL);
ideal EL = elm_PI(slimgb(rsp0+J0),2);
t1 = rtimer-t0;
"EL computed",t1;

t1 = rtimer;
poly sp1 = spoly(miter,f10);
poly rsp1 = reduce(sp1,BIH);
ideal EH = elm_PI(slimgb(rsp1+J0),2);
t1 = rtimer-t0;
"EH computed",t1;

//write(":w safe/EL.ideal",EL);
//write(":w safe/EH.ideal",EH);

ideal crp = slimgb(EL+EH);
if(crp == 1)
{
	"Circuit Rectifiable at this location";	
}
else
{
	"Circuit not rectifiable at this location";
}
"time here",rtimer-t0;
