LIB "multivariate_burg.lib";
LIB "primdec.lib";
LIB "control.lib";
LIB "linalg.lib";
LIB "my_proc.lib";
ring r = (2, x), (Z, A, B, z_0, z_1, r_0, s_0, s_3, s_1, s_2, a_0, a_1, b_0, b_1), lp; 

minpoly = x^2 + x + 1;

proc xorgate(poly g, poly h)
{
	return(g+h);
}

proc andgate(poly g, poly h)
{
	return(g*h);
}

//circuit -  2 bit mastrovito multiplier poly's
//correct implementation
poly f1 = Z + z_0 + z_1*x;
poly f2 = A + a_0 + a_1*x;
poly f3 = B + b_0 + b_1*x;
poly f4 = z_0 + xorgate(s_0,s_3);
poly f5 = z_1 + xorgate(r_0,s_3);
poly f6 = r_0 + andgate(s_1,s_2);
poly f7 = s_0 + a_0*b_0;
poly f8 = s_3 + a_1*b_1;
poly f9 = s_2 + a_1*b_0;
poly f10 = s_1 + a_0*b_1;


//vanishing polynomials
poly f11 = a_0^2 - a_0;
poly f12 = a_1^2 - a_1;
poly f13 = b_0^2 - b_0;
poly f14 = b_1^2 - b_1;
poly f15 = s_0^2 - s_0;
poly f16 = s_1^2 - s_1;
poly f17 = s_2^2 - s_2;
poly f18 = s_3^2 - s_3;
poly f19 = r_0^2 - r_0;
poly f20 = z_0^2 - z_0;
poly f21 = z_1^2 - z_1;

poly f22 = Z^4 - Z;
poly f23 = A^4 - A;
poly f24 = B^4 - B;

//word level spec
poly spec = Z + A*B;

//crete the ideal of vanishing polynomials
ideal J0 = f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23,f24;

//split the ideal into two 

//rem;
ideal J2 = f1,f2,f3,f4,f5;
list J2l = f1,f2,f3,f4,f5,f6;
ideal J1 = f7,f8,f9,f10;

poly uc = f6;

poly spec = Z + A*B;

poly quo;
poly rem;

//poly prem = reduce(spec,J2+J0);

//prem;

rem, quo = multivariate_burg(spec,J2l,J0); 

"remainder",rem;
"quotient",quo;

ideal dec = variables(quo);
ideal JCp = quo,J1;

if (size(dec)>=1)
{
	"quotient is not a constant";
	matrix T3 = lift(JCp+J0,rem);
	poly sol  = T3[1,1];
}
else
{	
	"quotient is a constant";
	if (quo != 1)
	{
		matrix quoi = inverse(quo);
	}
	else
	{
		matrix quoi = 1;
	}
	poly irem   = quoi[1,1]*rem;
	poly sol    = reduce(irem,J1);
}

"solution for P is ",sol; quit;
