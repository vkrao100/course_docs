LIB "primdec.lib";
ring r = (2, x), (Z, A, B, z_0, z_1, r_0, s_0, s_1, s_2, s_3, a_0, b_0, a_1, b_1), lp; 

minpoly = x^2 + x + 1;

proc xorgate(poly g, poly h)
{
	return(g+h);
}

//circuit -  2 bit mastrovito multiplier poly's
//correct implementation
poly f1 = A + a_0 + a_1*x;
poly f2 = B + b_0 + b_1*x;
poly fO = Z + z_0 + z_1*x;
poly f3 = s_0 + a_0*b_0;
poly f4 = s_1 + a_0*b_1;
poly f5 = s_2 + a_1*b_0;
poly f6 = s_3 + a_1*b_1;
poly f7 = r_0 + xorgate(s_1,s_2);
poly f8 = z_0 + xorgate(s_0,s_3);
poly f9 = z_1 + xorgate(r_0,s_3);

//buggy implementation
//introducing bug - AND gate instead of XOR gate
poly fb7 = r_0 + s_1*s_2;

//vanishing polynomials
poly f10 = A^4 - A;
poly f11 = B^4 - B;
poly f12 = Z^4 - Z;

poly f13 = a_0^2 - a_0;
poly f14 = a_1^2 - a_1;
poly f15 = b_0^2 - b_0;
poly f16 = b_1^2 - b_1;

poly f17 = s_0^2 - s_0;
poly f18 = s_1^2 - s_1;
poly f19 = s_2^2 - s_2;
poly f20 = s_3^2 - s_3;

poly f21 = r_0^2 - r_0;

poly f22 = z_0^2 - z_0;
poly f23 = z_1^2 - z_1;

//word level spec
poly spec = Z + A*B;

//list of polynomials for GB calculation
//ideal CI  = f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, fO;
ideal CI  = f1, f2, f3, f4, f5, f6, f7, f8, f9, fO;
ideal CI0 = f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23;
ideal MI = f10, f11, f12, f17, f18, f19, f20, f21, f22, f23;
//ideal BI  = f1, f2, f3, f4, f5, f6, fb7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, fO;
ideal BI  = f1, f2, f3, f4, f5, f6, fb7, f8, f9, fO;
ideal BI0 = f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23;

ideal C = CI + CI0;
ideal B = BI + BI0;

list GR = groebner(C+B);
"GB of the given ideals - groebner(C+B)",GR;
list R1 = groebner(radical(C));
"radical of CI - groebner(radical(C))", R1;
list R2 = groebner(radical(B));
"radical of BI - groebner(radical(B))", R2;
list C1 = groebner(radical(C)*radical(B));
"product of radicals- condition 1- groebner(radical(C)*radical(B))",C1;
list C2 = groebner(radical(C*B));
"radical of products- condition 2- groebner(radical(C*B))", C2;
list C3 = groebner(radical(radical(C)*radical(B)));
"radical of product of radicals- condition 3 - groebner(radical(radical(C)*radical(B)))", C3;
list Q1 = quotient(C,B);
"quotient of ideals when intersecting- CI:BI - groebner(quotient(C,B))",Q1;
list C4 = groebner(intersect(C, B));
"intersection of radical ideals - groebner(intersect(C, B))", C4;
list C5 = groebner(intersect(CI, BI)+CI0);
"intersection of non-radical ideals + vanishing polynomials - groebner(intersect(CI, BI)+ CI0)", C5;
list C6 = groebner(groebner(C*B)+CI0);
"product of non-radical ideals + vanishing polynomials - groebner((CI*BI)+ CI0)", C6;