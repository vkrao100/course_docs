LIB "primdec.lib";
LIB "control.lib";
LIB "multivariate_division.lib";
LIB "multivariate_burg.lib";
LIB "burg.lib";
LIB "grobner_calc.lib";
LIB "teachstd.lib";
//ring r = (2, x), (Z, A, B, z_1, z_0, r_0, s_0, s_3, s_1, s_2, a_0, b_0, a_1, b_1), lp; 
ring r = (2, x), (Z, A, B, z_1, z_0, s_0, s_3, a_0, b_0, a_1, b_1,r_0, s_1, s_2), lp; 
//ring r = (2, x), (A, B, a_0, b_0, a_1, b_1, s_0, s_3, s_1, s_2, r_0, z_0, z_1, Z), lp; 

minpoly = x^2 + x + 1;

proc xorgate(poly g, poly h)
{
	return(g+h);
}

//circuit -  2 bit mastrovito multiplier poly's
//correct implementation
poly f1 = A + a_0 + a_1*x;
poly f2 = B + b_0 + b_1*x;
poly f3 = s_0 + a_0*b_0;
poly f4 = s_1 + a_0*b_1;
poly f5 = s_2 + a_1*b_0;
poly f6 = s_3 + a_1*b_1;
poly f7 = r_0 + xorgate(s_1,s_2);
poly f77 = r_0 +(x+1)*(s_0+(x+1)*s_3+a_0*b_0+(x)*a_0*b_1+(x)*b_0*a_1+(x+1)*a_1*b_1);
poly f8 = z_0 + xorgate(s_0,s_3);
poly f9 = z_1 + xorgate(r_0,s_3);

//buggy implementation
//introducing bug - AND gate instead of XOR gate
poly fb7 = r_0 + s_1*s_2;
//poly fb4 = s_1 + a_0 + b_1;
//vanishing polynomials
poly f10 = A^4 - A;
poly f11 = B^4 - B;
poly f12 = Z^4 - Z;

poly f13 = a_0^2 - a_0;
poly f14 = a_1^2 - a_1;
poly f15 = b_0^2 - b_0;
poly f16 = b_1^2 - b_1;

poly f17 = s_0^2 - s_0;
poly f18 = s_1^2 - s_1;
poly f19 = s_2^2 - s_2;
poly f20 = s_3^2 - s_3;

poly f21 = r_0^2 - r_0;

poly f22 = z_0^2 - z_0;
poly f23 = z_1^2 - z_1;

poly f24= Z + z_0 + z_1*x;

poly rr = (x)*a_0*a_1*b_0*b_1+(x)*a_0*b_1+(x)*a_1*b_0;

poly f24d = Z + z_0 + z_1*x + rr;

//standard monomial list
poly f25 = 1;
poly f26 = a_0;
poly f27 = a_1;
poly f28 = b_0;
poly f29 = b_1;
poly f30 = a_0*b_0;
poly f31 = a_0*b_1;
poly f32 = a_1*b_0;
poly f33 = a_1*b_1;
poly f34 = a_0*a_1;
poly f35 = b_0*b_1;
poly f36 = a_0*b_0*a_1;
poly f37 = a_0*b_0*b_1;
poly f38 = a_0*b_1*a_1;
poly f39 = a_1*b_0*b_1;
poly f40 = a_0*a_1*b_0*b_1;

//word level spec
poly spec = Z + A*B;

//list jd = f24,f1,f2,f9,f8,f7;

ideal J0 = f10,f11,f12,f13,f14,f15,f16,f17,f18,f19,f20,f21,f22,f23;
ideal SM = f25,f26,f27,f28,f29,f30,f31,f32,f33,f34,f35,f36,f37,f38,f39,f40;
ideal SMB = f30,f31,f33,f36,f37,f39,f40;

//list of polynomials for GB calculation
ideal CI  = f1, f2, f3, f4, f5, f6, f77, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24;
ideal CIC  = f1, f2, f3, f4, f5, f6, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, spec;
//ideal CI  = f1, f2, f3, f4, f5, f6, f7, f8, f9;
ideal BI  = f1, f2, f3, f4, f5, f6, fb7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24;
list BIl  = f1, f2, f3, f4, f5, f6, fb7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24;
ideal BIC  = f1, f2, f3, f4, f5, f6, fb7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24d;
//ideal BI  = f1, f2, f3, f4, f5, f6, fb7, f8, f9;

list do = f24,f1,f2,f9,f8,f7;

poly rem = multivariate_burg(spec,do,J0);
rem;

poly ns = s_0+(x+1)*s_3+a_0*b_0+(x)*a_0*b_1+(x)*b_0*a_1+(x+1)*a_1*b_1;
poly p = (x)*a_0*b_1+(x)*b_0*a_1;

poly h7 = x;
ideal Jd = h7,f3,f4,f5,f6;
ideal Jdi = f3,f4,f5,f6;
list Jdl = h7,f3,f4,f5,f6;
list J0l = f13,f14,f15,f16,f17,f18,f19,f20; 
ideal J0i = f13,f14,f15,f16,f17,f18,f19,f20; 

//list G;

//G = reducedGrobner(Jdl+J0l);
//G;

//ideal GG = groebner(Jd+J0i);
//GG;


matrix T = lift(Jd+J0,ns);
T;
//genericity(T);
//quotient(Jdi,h7);
ideal gg = groebner(CI);
gg;
reduce(spec,CI);