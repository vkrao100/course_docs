//LIB "multivariate_division.lib";
//LIB "multivariate_burg.lib";
LIB "control.lib";
ring r = 2, (z,z2,z1,d0,e2,e1,e0,a,b,c) ,lp;

poly f = z + ac + a + b + bc + c;

poly f7 = z + z1*z2;
poly f5 = z1 + e0*d0 + e0 + d0;
poly f6 = z2 + d0 + e2;
poly f4 = d0 + e1*c;
poly f3 = e2 + c + 1;
poly f2 = e1 + bc + b + c;
poly f1 = e0 + a + b;


poly d_0 = d0^2 -d0 ;
poly e_0 = e0^2 -e0 ;
poly e_1 = e1^2 -e1 ;
poly e_2 = e2^2 -e2 ;

poly z1_0 = z1^2 - z1;
poly z2_0 = z2^2 - z2;
poly z_0 = z^2 - z;
poly a_0 = a^2 - a;
poly b_0 = b^2 - b;
poly c_0 = c^2 - c;

poly h7 = 1;

poly g = f + h7*lead(f7);
ideal J0 = a_0, b_0, c_0, d_0, e_0, e_1, e_2, z1_0, z2_0, z_0;
g = reduce(g,J0);
 
ideal Jsub = h7,f6,f5,f4,f3,f2,f1;
matrix T1 = lift(Jsub+J0,g);


/*
ideal J0i = a_0, b_0, c_0, d_0, e_0, e_1, e_2;
list J0 = a_0, b_0, c_0, d_0, e_0, e_1, e_2;

list JCl = f7,f6,f5;
poly rem = multivariate_burg(spec,(JCl+J0),J0i);

poly h4 = e0*e2 + e2 + 1;
poly ns = ac + a + bc + b + c;

//ideal JCp = h5,f1,f2,f3,f4;
//ideal JCi = f1,f2,f3,f4;

ideal try1 = f7,f6,f5,f4,f3,f2,f1;
ideal try2 = f7,f6,f5,h4,f3,f2,f1;

matrix T1 = lift(try1+J0i,spec);
T1;

matrix T2 = lift(try2+J0i,spec);
T2;

//matrix T3 = lift(JCp+J0i,ns);
//T3;

//quotient(JCi,h4);

//ideal JCCi = f1,f2,f3,f4,f5,f6,f7;
//reduce(spec,JCCi+J0i);

*/